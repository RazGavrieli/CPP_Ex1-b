/**
 * An example of how to write unit tests.
 * Use this as a basis to build a more complete Test.cpp file.
 * 
 * IMPORTANT: Please write more tests - the tests here are only for example and are not complete.
 *
 * AUTHORS: Raz Gavrieli
 * 
 * Date: 2022-02
 */
#include "doctest.h"
#include "mat.hpp"
using namespace ariel;

#include <string>
#include <algorithm>
using namespace std;

/**
 * Returns the input string without the whitespace characters: space, newline and tab.
 * Requires std=c++2a.
 */
string nospaces(string input) {
	std::erase(input, ' ');
	std::erase(input, '\t');
	std::erase(input, '\n');
	std::erase(input, '\r');
	return input;
}


TEST_CASE("Good input") {
	/* normal tests (9)*/
	SUBCASE("normal cases") {
		CHECK(nospaces(mat(9, 7, '@', '-')) == nospaces("@@@@@@@@@\n"
														"@-------@\n"
														"@-@@@@@-@\n"
														"@-@---@-@\n"
														"@-@@@@@-@\n"
														"@-------@\n"
														"@@@@@@@@@"));
		CHECK(nospaces(mat(13, 5, '@', '-')) == nospaces("@@@@@@@@@@@@@\n"
														"@-----------@\n"
														"@-@@@@@@@@@-@\n"
														"@-----------@\n"
														"@@@@@@@@@@@@@"));
		CHECK(nospaces(mat(3, 5, '$', '+')) == nospaces("$$$\n"
														"$+$\n"
														"$+$\n"
														"$+$\n"
														"$$$"));
		CHECK(nospaces(mat(5, 3, '$', '+')) == nospaces("$$$$$\n"
														"$+++$\n"
														"$$$$$"));
		CHECK(nospaces(mat(11, 11, '-', '+')) == nospaces("-----------\n"
														"-+++++++++-\n"
														"-+-------+-\n"
														"-+-+++++-+-\n"
														"-+-+---+-+-\n"
														"-+-+-+-+-+-\n"
														"-+-+---+-+-\n"
														"-+-+++++-+-\n"
														"-+-------+-\n"
														"-+++++++++-\n"
														"-----------"));
		CHECK(nospaces(mat(51, 49, '-', '+')) == nospaces("---------------------------------------------------\n"
															"-+++++++++++++++++++++++++++++++++++++++++++++++++-\n"
															"-+-----------------------------------------------+-\n"
															"-+-+++++++++++++++++++++++++++++++++++++++++++++-+-\n"
															"-+-+-------------------------------------------+-+-\n"
															"-+-+-+++++++++++++++++++++++++++++++++++++++++-+-+-\n"
															"-+-+-+---------------------------------------+-+-+-\n"
															"-+-+-+-+++++++++++++++++++++++++++++++++++++-+-+-+-\n"
															"-+-+-+-+-----------------------------------+-+-+-+-\n"
															"-+-+-+-+-+++++++++++++++++++++++++++++++++-+-+-+-+-\n"
															"-+-+-+-+-+-------------------------------+-+-+-+-+-\n"
															"-+-+-+-+-+-+++++++++++++++++++++++++++++-+-+-+-+-+-\n"
															"-+-+-+-+-+-+---------------------------+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+++++++++++++++++++++++++-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-----------------------+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+++++++++++++++++++++-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-------------------+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+++++++++++++++++-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+---------------+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+++++++++++++-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-----------+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+++++++++-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+-------+-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+-+++++-+-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+-+---+-+-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+-+++++-+-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+-------+-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-+++++++++-+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+-----------+-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+-+++++++++++++-+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+---------------+-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-+++++++++++++++++-+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+-------------------+-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-+++++++++++++++++++++-+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+-----------------------+-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+-+++++++++++++++++++++++++-+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+---------------------------+-+-+-+-+-+-\n"
															"-+-+-+-+-+-+++++++++++++++++++++++++++++-+-+-+-+-+-\n"
															"-+-+-+-+-+-------------------------------+-+-+-+-+-\n"
															"-+-+-+-+-+++++++++++++++++++++++++++++++++-+-+-+-+-\n"
															"-+-+-+-+-----------------------------------+-+-+-+-\n"
															"-+-+-+-+++++++++++++++++++++++++++++++++++++-+-+-+-\n"
															"-+-+-+---------------------------------------+-+-+-\n"
															"-+-+-+++++++++++++++++++++++++++++++++++++++++-+-+-\n"
															"-+-+-------------------------------------------+-+-\n"
															"-+-+++++++++++++++++++++++++++++++++++++++++++++-+-\n"
															"-+-----------------------------------------------+-\n"
															"-+++++++++++++++++++++++++++++++++++++++++++++++++-\n"
															"---------------------------------------------------"));
		CHECK(nospaces(mat(5, 5, '$', '+')) == nospaces("$$$$$\n"
														"$+++$\n"
														"$+$+$\n"
														"$+++$\n"
														"$$$$$"));
		CHECK(nospaces(mat(7, 7, '$', '+')) == nospaces("$$$$$$$\n"
														"$+++++$\n"
														"$+$$$+$\n"
														"$+$+$+$\n"
														"$+$$$+$\n"
														"$+++++$\n"
														"$$$$$$$"));
		CHECK(nospaces(mat(9, 9, '$', '+')) == nospaces("$$$$$$$$$\n"
														"$+++++++$\n"
														"$+$$$$$+$\n"
														"$+$+++$+$\n"
														"$+$+$+$+$\n"
														"$+$+++$+$\n"
														"$+$$$$$+$\n"
														"$+++++++$\n"
														"$$$$$$$$$"));
	}

	/* extreme cases (3)*/
	SUBCASE("extreme cases") {
		CHECK(nospaces(mat(1, 1, '#', ')')) == nospaces("#"));
		CHECK(nospaces(mat(1, 5, '#', '-')) == nospaces("#####"));
		CHECK(nospaces(mat(5, 1, '#', '-')) == nospaces("#####"));
	}

	/* big difference tests (4)*/
	SUBCASE("big dif cases") {
		CHECK(nospaces(mat(1, 501, '#', '-')) == nospaces("#####################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################"));
		CHECK(nospaces(mat(501, 1, '#', '-')) == nospaces
		CHECK(nospaces(mat(101, 5, '#', ')')) == nospaces("#####################################################################################################\n"
														"#)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))#\n"
														"#)#################################################################################################)#\n"
														"#)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))#\n"
														"#####################################################################################################"));
		CHECK(nospaces(mat(5, 101, '#', ')')) == nospaces("#####\n#)))#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)#)#\n#)))#\n#####"));
	}
	
}

TEST_CASE("Bad input") {
	/* even input (5)*/
	SUBCASE("even input") {
		CHECK_THROWS(mat(10, 5, '$', '%'));
		CHECK_THROWS(mat(5, 10, '$', '%'));
		CHECK_THROWS(mat(10, 10, '$', '%'));
		CHECK_THROWS(mat(2, 2, '$', '%'));
		CHECK_THROWS(mat(9563331, 19532, '+', '-'));
	}
	/* same char (4)*/ //(NOT NEEDED FOR SOME REASON)
	// SUBCASE("same char") {		
	// 	CHECK_THROWS(mat(11, 7, '$', '$'));
	// 	CHECK_THROWS(mat(1, 1, '=', '='));
	// 	CHECK_THROWS(mat(2, 7, '%', '%'));
	// 	CHECK_THROWS(mat(11, 7, 'A', 65)); // 65 is ascii value of 'A'
	// }
	
	/* bad chars (8) */
	SUBCASE("bad char") {
		CHECK_THROWS(mat(11, 7, '$', ' '));
		CHECK_THROWS(mat(1, 1, '=', '\n'));
		CHECK_THROWS(mat(5, 7, '%', '\t'));
		CHECK_THROWS(mat(13, 7, 'A', '\r')); 
	}
	/* negative input and zeros (8)*/
	SUBCASE("negative and zeros") {
		CHECK_THROWS(mat(0, 7, '%', '='));
		CHECK_THROWS(mat(7, 0, '%', '='));

		CHECK_THROWS(mat(2, 0, '%', '='));
		CHECK_THROWS(mat(0, 6, '%', '='));

		CHECK_THROWS(mat(-7, 5, '%', '='));
		CHECK_THROWS(mat(3, -7, '%', '='));

		CHECK_THROWS(mat(-5, -7, '%', '='));
		CHECK_THROWS(mat(-5, 2, '%', '='));
	}
}



